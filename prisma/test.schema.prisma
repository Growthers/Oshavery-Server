datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model messages {
  id      String  @id @default(uuid())
  content String
  ip      String
  deleted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  channels   channels @relation(fields: [channel_id], references: [id])
  channel_id String
  user       users?   @relation(fields: [userId], references: [id])
  userId     String?
  media      media[]
  guilds     guilds?  @relation(fields: [guildsId], references: [id])
  guildsId   String?
}

model emojis {
  id          String    @id @default(uuid())
  short_name  String
  media_id    String
  uploader_id String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?
}

model invitations {
  id       String    @id @default(uuid())
  enable   Boolean   @default(false)
  max      Int?
  count    Int       @default(0)
  deadline DateTime?

  guild     guilds?   @relation(fields: [guildId], references: [id])
  guildId   String?
  channel   channels? @relation(fields: [channelId], references: [id])
  channelId String?
}

model channels {
  id                String        @id @default(uuid())
  name              String
  type              String
  topic             String?
  position          Int
  latest_message_id String
  medias            media[]
  messages          messages[]
  invitations       invitations[]
  created_at        DateTime      @default(now())
  updated_at        DateTime?     @updatedAt
  deleted_at        DateTime?
  guilds            guilds?       @relation(fields: [guildId], references: [id])
  guildId           String?
}

model guilds {
  id                   String                 @id @default(uuid())
  name                 String
  topic                String?
  icon                 String
  created_at           DateTime               @default(now())
  updated_at           DateTime?              @updatedAt
  deleted_at           DateTime?
  channels             channels[]
  messages             messages[]
  invitations          invitations[]
  guild_users_mappings guild_users_mappings[]
  role                 role[]
  media                media[]
}

model guild_users_mappings {
  id   String @id @default(uuid())
  name String

  guild    guilds @relation(fields: [guild_id], references: [id])
  guild_id String
  users    users  @relation(fields: [usersId], references: [id])
  usersId  String
}

model users {
  id                   String                 @id @default(uuid())
  name                 String
  bot                  Boolean
  origin               String
  sub                  String                 @unique
  avatarurl            String
  medias               media[]
  messages             messages[]
  guild_users_mappings guild_users_mappings[]
}

model server_info {
  id             Int    @id @default(autoincrement())
  instance_name  String @unique
  user_count     Int
  message_count  Int
  admin_id       String
  tos            String
  privacy_policy String
}

model role {
  id          String  @id @default(uuid())
  name        String
  permissions String
  mentionable Boolean

  guild    guilds? @relation(fields: [guild_id], references: [id])
  guild_id String?
}

model media {
  id       String @id @default(uuid())
  name     String
  mime     String
  size     Int
  fullpath String
  path     String
  type     String
  guild    guilds @relation(fields: [guild_id], references: [id])
  guild_id String @unique

  message    messages @relation(fields: [message_id], references: [id])
  message_id String

  channel    channels? @relation(fields: [channelId], references: [id])
  channelId  String?
  users      users?    @relation(fields: [uploaderId], references: [id])
  uploaderId String?
}
